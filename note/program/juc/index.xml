<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>juc on AlfredNing</title>
    <link>https://AlfredNing.github.io/note/program/juc/</link>
    <description>Recent content in juc on AlfredNing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 19 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://AlfredNing.github.io/note/program/juc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>07 AQS</title>
      <link>https://AlfredNing.github.io/note/program/juc/07-aqs/</link>
      <pubDate>Sat, 22 Jul 2023 20:31:52 +0800</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/juc/07-aqs/</guid>
      <description>定义 AbstractQueuedSynchronizer: 抽象队列同步器
是用来构建锁或者其它同步器组件的重量级基础框架及整个JUC体系的基石，通过内置的FIFO队列来完成资源获取线程的排队工作，并通过一个int类变量表示持有锁的状态
和AQS相关的
ReentrantLock CountDownLatch ReentrantReadWriteLock Semaphore 锁: 面向锁的使用者,定义了程序员和锁交互的使用层API
同步器: 面向锁的实现者
抢到资源的线程直接使用处理业务，抢不到资源的必然涉及一种排队等候机制。抢占资源失败的线程继续去等待(类似银行业务办理窗口都满了，暂时没有受理窗口的顾客只能去候客区排队等候)，但等候线程仍然保留获取锁的可能且获取锁流程仍在继续(候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务)。
既然说到了排队等候机制，那么就一定会有某种队列形成，这样的队列是什么数据结构呢？
如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是AQS的抽象表现。它将请求共享资源的线程封装成队列的结点（Node），通过CAS、自旋以及LockSupport.park()的方式，维护state变量的状态，使并发达到同步的效果。
体系架构 AQS = int变量 + CLH队列
Node内部类 同步队列基本结构 CLH：Craig、Landin and Hagersten 队列，是个单向链表，AQS中的队列是CLH变体的虚拟双向队列（FIFO）</description>
    </item>
    
    <item>
      <title>06 Synchronized与锁升级</title>
      <link>https://AlfredNing.github.io/note/program/juc/06-synchronized%E4%B8%8E%E9%94%81%E5%8D%87%E7%BA%A7/</link>
      <pubDate>Sat, 22 Jul 2023 10:21:34 +0800</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/juc/06-synchronized%E4%B8%8E%E9%94%81%E5%8D%87%E7%BA%A7/</guid>
      <description>Syncronized的性能变化 锁升级
无锁 -&amp;gt; 偏向锁 -&amp;gt; 轻量级锁 -&amp;gt; 重量级锁
java5之前，只有Syncronized，操作系统级别的重量锁，性能低下。内核态与用户态的切换 java的线程是映射到操作系统原生线程之上的，如果要阻塞或唤醒一个线程就需要操作系统介入，需要在户态与核心态之间切换，这种切换会消耗大量的系统资源，因为用户态与内核态都有各自专用的内存空间，专用的寄存器等，用户态切换至内核态需要传递给许多变量、参数给内核，内核也需要保护好用户态在切换时的一些寄存器值、变量等，以便内核态调用结束后切换回用户态继续工作。
Java早期版本，Synchronized依赖于操作系统底层的Mutex Lock来实现，挂起线程和恢复线程都需要转入内核态运行，阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态切换需要耗费处理器时间，如果同步代码块中内容过于简单，这种切换的时间可能比用户代码执行的时间还长”，时间成本相对较高。
Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了轻量级锁和偏向锁
? 为什么为什么每一个对象都可以成为一个锁 Monitor可以理解为一种同步工具，也可理解为一种同步机制，常常被描述为一个Java对象。Java对象是天生的Monitor，每一个Java对象都有成为Monitor的潜质，因为在Java的设计中 ，每一个Java对象自打娘胎里出来就带了一把看不见的锁，它叫做内部锁或者Monitor锁。
Monitor的本质是依赖于底层操作系统的Mutex Lock实现，操作系统实现线程之间的切换需要从用户态到内核态的转换，成本非常高。
Mutex Lock
Monitor是在jvm底层实现的，底层代码是c++。本质是依赖于底层操作系统的Mutex Lock实现，操作系统实现线程之间的切换需要从用户态到内核态的转换，状态转换需要耗费很多的处理器时间成本非常高。所以synchronized是Java语言中的一个重量级操作。
Monitor与java对象以及线程是如何关联 ？
1.如果一个java对象被某个线程锁住，则该java对象的Mark Word字段中LockWord指向monitor的起始地址
2.Monitor的Owner字段会存放拥有相关联对象锁的线程id
Mutex Lock 的切换需要从用户态转换到核心态中，因此状态转换需要耗费很多的处理器时间。
java6开始，优化Synchronized Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了轻量级锁和偏向锁, 逐步升级锁的过程
无锁演示 程序不会有锁的竞争
偏向锁 定义 大多数情况下，锁不仅不存在多线程竞争，还存在由同一线程多次获得的情况。
偏向锁就是在这种情况下出现的，它的出现是为了解决只有在一个线程执行同步时提高性能。
偏向锁的持有 锁总是被第一个占用它的线程拥有，该线程就是锁的偏向线程
锁第一次拥有，记录偏向线程ID。这样偏向线程就一直持有着锁(后续这个线程进入和退出这段加了同步锁的代码块时，不需要再次加锁和释放锁。而是直接比较对象头里面是否存储了指向当前线程的偏向锁) 相等时：表示偏向锁偏向于当前线程。就不需要再尝试获得锁了，直到竞争发生才释放锁。以后每次同步，检查锁的偏向线程ID与当前线程ID是否一致，如果一致直接进入同步。无需每次加锁解锁都去CAS更新对象头。如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。 不一致：发生竞争。锁已经不是总是偏向于同一个线程了，这时候可能需要升级变为轻量级锁，才能保证线程间公平竞争锁。偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。 技术实现
一个synchronized方法被一个线程抢到了锁时，那这个方法所在的对象就会在其所在的Mark Word中将偏向锁修改状态位，同时还会有占用前54位来存储线程指针作为标识。若该线程再次访问同一个synchronized方法时，该线程只需去对象头的Mark Word 中去判断一下是否有偏向锁指向本身的ID，无需再进入 Monitor 去竞争对象了。
演示 import org.openjdk.jol.info.ClassLayout; /** * @author Alfred.Ning * @since 2023年07月22日 18:49:00 */ public class BiasedLockDemo { private static Object objectLock = new Object(); public static void main(String[] args) { /** * -XX:+UseBiasedLocking 开启偏向锁(默认) -XX:-UseBiasedLocking 关闭偏向锁 -XX:BiasedLockingStartupDelay=0 关闭延迟(演示偏向锁时需要开启) 参数说明： 偏向锁在JDK1.</description>
    </item>
    
    <item>
      <title>05 对象内存布局</title>
      <link>https://AlfredNing.github.io/note/program/juc/05-%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%A4%B4/</link>
      <pubDate>Sat, 22 Jul 2023 07:01:53 +0800</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/juc/05-%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%A4%B4/</guid>
      <description>对象内存布局 对象内部结构 = 对象头 + 实例数据 + 内存填充（保证8字节的倍数）
对象头 对象头 = 对象标记(Mark Word) + 类元信息(类型指针)
对象标记占8个字节， 类型指针占8个字节，总共16个字节
对象标记 对象的HashCode 分代年龄，锁标志位等信息。
这些信息都是与对象自身定义无关的数据，所以MarkWord被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间MarkWord里存储的数据会随着锁标志位的变化而变化。
对象布局、GC回收和后面的锁升级就是对象标记MarkWord里面标志位的变化
类元信息 对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。
实例数据 内存填充 虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐这部分内存按8字节补充对齐。
Object obj = new Object() GC年龄采用4位bit存储，最大为15，
例如MaxTenuringThreshold参数默认值就是15
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.openjdk.jol&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jol-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.15&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; import org.openjdk.jol.info.ClassLayout; /** * @author Alfred.Ning * @since 2023年07月22日 10:06:00 */ public class ObjectDemo { public static void main(String[] args) { // vm的细节详细情况 // System.out.println(VM.current().details()); Object obj = new Object(); System.out.println(ClassLayout.parseInstance(obj).toPrintable()); } } -- 查看启动参数 java -XX:+PrintCommandLineFlags -version 关闭压缩之前</description>
    </item>
    
    <item>
      <title>04 ThreadLocal</title>
      <link>https://AlfredNing.github.io/note/program/juc/04-threadlocal/</link>
      <pubDate>Wed, 19 Jul 2023 16:22:32 +0800</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/juc/04-threadlocal/</guid>
      <description>定义 ThreadLocal提供线程局部变量。这些变量与正常的变量不同，因为每一个线程在访问ThreadLocal实例的时候（通过其get或set方法）都有自己的、独立初始化的变量副本。ThreadLocal实例通常是类中的私有静态字段，使用它的目的是希望将状态（例如，用户ID或事务ID）与线程关联起来。
每个ThreadLocl都是自己专属的本地变量副本,不存在多线程间共享的问题 每个线程对该值都是各自线程互相独立访问的 初始化 ThreadLocal&amp;lt;Integer&amp;gt; tl1 = new ThreadLocal&amp;lt;Integer&amp;gt;() { @Override protected Integer initialValue() { return 2; } }; ThreadLocal&amp;lt;Integer&amp;gt; tl2 = ThreadLocal.withInitial(() -&amp;gt; 2); ? 为什么要加remove方法
防止内存泄露
实践 不安全的SimpleDateFormat 问题演示 class SimpleDateFormatDemo { public static final SimpleDateFormat sdf = new SimpleDateFormat(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;); public static Date parseSdf(String dataStr) throws ParseException { return sdf.parse(dataStr); } public static void main(String[] args) throws ParseException { for (int i = 0; i &amp;lt; 5; i++) { new Thread(() -&amp;gt; { try { System.</description>
    </item>
    
    <item>
      <title>03-Cas-原子操作</title>
      <link>https://AlfredNing.github.io/note/program/juc/03-cas-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 12 Jul 2023 16:20:37 +0800</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/juc/03-cas-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid>
      <description>CAS定义 Compare And Swap：比较并交换 V: 位置内存值 A: 旧的预期值 B: 要修改更新的值
当且仅当V中的值和A值相等，用B值更新V中的值
硬件级别保证 CAS底层是一条CPU的原子指令 cmpxchg指令，不会造成数据不一致的问题，Java底层提供由Unsafe类提供的CAS方法
执行cmpxchg指令的时候，会判断当前系统是否为多核系统，如果是就给总线加锁，只有一个线程会对总线加锁成功，加锁成功之后会执行cas操作，也就是说CAS的原子性实际上是CPU实现的， 其实在这一点上还是有排他锁的，只是比起用synchronized， 这里的排他时间要短的多， 所以在多线程情况下性能会比较好
Unsafe类 是CAS的核心类，Unsafe位于sun.misc包中，通过CAS类可以直接通过操作特定内存的数据**，所有的方法都是用native修饰， 也就是说Unsafe类底层都直接调用操作系统底层资源执行相应任务**
变量offSet代表变量值在内存的地址
变量value用volatile修饰，保证了多线程之间的内存可见性。
AtomicInteger类 AtomicInteger主要是通过CAS + volatile + native方法类保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。
CAS并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令。这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题。
CAS是靠硬件实现的从而在硬件层面提升效率，最底层还是交给硬件来保证原子性和可见性
实现方式是基于硬件平台的汇编指令，在intel的CPU中(X86机器上)，使用的是汇编指令cmpxchg指令。
核心思想就是：比较要更新变量的值V和预期值E（compare），相等才会将V的值设为新值N（swap）如果不相等自旋再来。
原子引用 AtomicInteger原子整型，可以自定义自己的原理引用类型
自定义原子引用 import java.util.concurrent.atomic.AtomicReference; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; /** * 自定义原子类型引用 * * @author Alfred.Ning * @since 2023年07月18日 11:41:00 */ public class AtomicReferenceDemo { public static void main(String[] args) { User u1 = new User(&amp;#34;u1&amp;#34;, 20); User u2 = new User(&amp;#34;u2&amp;#34;, 30); AtomicReference&amp;lt;User&amp;gt; userAtomicReference = new AtomicReference&amp;lt;&amp;gt;(); userAtomicReference.</description>
    </item>
    
    <item>
      <title>02-Volatile</title>
      <link>https://AlfredNing.github.io/note/program/juc/02-volatile/</link>
      <pubDate>Tue, 11 Jul 2023 08:04:59 +0800</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/juc/02-volatile/</guid>
      <description>JMM 现代计算机组成体系之上，CPU与内存之间的运行速度差距较大，为了缓存速度上的差异，引入了多级缓存。
Java Memory Model 本身是一种抽象的概念并不真实存在它仅仅描述的是一组约定或规范，通过这组规范定义了
程序中各个变量的读写访问方式 决定另一个线程对共享变量的写入以及如何变成对另一个线程可见 关键技术点围绕多线程的原子性、可见性、原子性
通过JMM来实现线程和主内存的抽象关系 屏蔽各个硬件平台和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果 特性 可见性 是指当一个线程修改了某一个共享变量的值，其他线程是否能够立即知道该变更 ，JMM规定了所有的变量都存储在主内存中。
Java中普通的共享变量不保证可见性，因为数据修改被写入内存的时机是不确定的，多线程并发下很可能出现&amp;quot;脏读&amp;quot;，所以每个线程都有自己的工作内存，线程自己的工作内存中保存了该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取，赋值等 ）都必需在线程自己的工作内存中进行，而不能够直接读写主内存中的变量。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成
原子性 指一个操作是不可中断的，即多线程环境下，操作不能被其他线程干扰
有序性 对于一个线程的执行代码而言，我们总是习惯性认为代码的执行总是从上到下，有序执行。
但为了提供性能，编译器和处理器通常会对指令序列进行重新排序。
**指令重排可以保证串行语义一致，但没有义务保证多线程间的语义也一致，即可能产生&amp;quot;脏读&amp;quot;，**简单说，
两行以上不相干的代码在执行的时候有可能先执行的不是第一条，不见得是从上到下顺序执行，执行顺序会被优化。
单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致。处理器在进行重排序时必须要考虑指令之间的数据依赖性，多线程环境中线程交替执行,由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的,结果无法预测
多线程度变量的读写过程 读写过程 JVM运行过程的实体是线程，而每个线程创建JVM时都会为其创建工作内存（栈空间）属于私有数据区，而java内存模型规定的所有变量都在主内存中。主内存是共享内存区域，所有线程都可以访问。
线程对变量的操作必须在工作内存中进行，首先要将变量从主内存中拷贝到自己的工作内存空间，然后对变量进行操作，操作完成之后在写回主内存
不能直接操作主内存中的变量，各个线程中的工作内存中存储着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间的通信(传值)必须通过主内存来完
总结 我们定义的所有共享变量都储存在物理主内存中 每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本(主内存中该变量的一份拷贝) 线程对共享变量所有的操作都必须先在线程自己的工作内存中进行后写回主内存，不能直接从主内存中读写(不能越级) 不同线程之间也无法直接访问其他线程的工作内存中的变量，线程间变量值的传递需要通过主内存来进行(同级不能相互访问) 多线程先行发生原则之happens-before 定义 在JMM中，如果一个操作执行的结果需要对另一个操作可见性或者 代码重排序，那么这两个操作之间必须存在happens-before关系。包含可见性和有序性的约束
说明 如果Java内存模型中所有的有序性都仅靠volatile和synchronized来完成，那么有很多操作都将会变得非常啰嗦，但是我们在编写Java并发代码的时候并没有察觉到这一点。
我们没有时时、处处、次次，添加volatile和synchronized来完成程序，这是因为Java语言中JMM原则下，有一个“先行发生”(Happens-Before)的原则限制和规矩
原则：
它是判断数据是否存在竞争，线程是否安全的非常有用的手段。依赖这个原则，我们可以通过几条简单规则一揽子解决并发环境下两个操作之间是否可能存在冲突的所有问题，而不需要陷入Java内存模型苦涩难懂的底层编译原理之中
总原则 如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。 两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行。如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。 8条规则 次序规则 一个线程内，按照代码顺序，写在前面的操作先行发生于写在后面的操作
锁定规则 一个unLock操作先行发生于后面((这里的“后面”是指时间上的先后))对同一个锁的lock操作
volatile变量规则 对一个volatile变量的写操作先行发生于后面对这个变量的读操作，前面的写对后面的读是可见的，这里的“后面”同样是指时间上的先后
传递规则 如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C
线程启动规则(Thread Start Rule) Thread对象的start()方法先行发生于此线程的每一个动作
线程中断规则(Thread Interruption Rule) 对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生
可以通过Thread.interrupted()检测到是否发生中断
线程终止规则(Thread Termination Rule) 线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread::join()方法是否结束、Thread::isAlive()的返回值等手段检测线程是否已经终止执行。
对象终结规则(Finalizer Rule) 一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始</description>
    </item>
    
    <item>
      <title>01-Thread</title>
      <link>https://AlfredNing.github.io/note/program/juc/01-thread/</link>
      <pubDate>Mon, 19 Jun 2023 19:56:37 +0800</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/juc/01-thread/</guid>
      <description>前置知识 1. 为什么多线程如何重要 硬件方面：摩尔定律失效，主频不在提高，核数在不断增加的情况下，让程序运行更快就需要用到并行或者并发编程
软件方面：高并发系统： 异步 + 回调等生产需求
2. 进程 是程序的一次执行，是系统进行资源分配和调度的独立单位，每个进程都有它自己的内存空间和系统资源
3. 线程 在同一进程有1个或多个线程，执行多个任务，每个任务可以看做线程，共享内存空间和资源
操作系统
多进程形式，允许多个任务同时进行 多线程形式，允许单个任务进行拆分不同的部分允许 提供协调机制：一方面进程和线程之间产生冲突，一方面进程和线程之间共享资源 4. 管程 操作系统层面：监视器(Monitor), 同步机制，是保证（同一时间）只有一个线程可以访问被保护的数据和代码。JVM中同步是基于进入和退出监视器对象(Monitor,管程对象)来实现的，每个对象实例都会有一个Monitor对象，底层是由C++实现。
5. 用户线程和守护线程 Java线程分为用户线程和守护线程
线程的daemon属性默认为false:用户线程
守护线程：特殊线程，后台执行任务，比如垃圾回收线程
用户线程：系统的工作线程，完成程序所执行的业务操作
当程序的所有用户线程执行完毕，不管是否守护线程执行完毕，系统自动退出 设置守护线程，需要在start()方法之前 6. 异步编排 Future 与 Callable Future 定义了操作异步执行任务的一些方法，如：获取异步执行的结果，取消任务执行，判断任务是否取消，判断任务执行是否完毕等。子线程去执行任务，比较耗时，主线程继续执行 Callable定义了具有返回值的任务 FutureTask **get阻塞：**一旦调用get方法，无论执行完成都会阻塞，生成禁****用
解决措施：轮询替代阻塞
高并发中，不要阻塞，尽可能少加锁，使用CAS
isDone轮询：
轮询方式也是会耗费cpu资源，不能立即获得计算结果 如果想要异步获取结果,通常都会以轮询的方式去获取结果尽量不要阻塞 import java.util.concurrent.ExecutionException; import java.util.concurrent.FutureTask; import java.util.concurrent.TimeUnit; import java.util.concurrent.TimeoutException; /** * @author Alfred.Ning * @since 2023年06月20日 20:59:00 */ public class FutureTaskDemo { public static void main(String[] args) throws ExecutionException, InterruptedException, TimeoutException { FutureTask&amp;lt;String&amp;gt; futureTask = new FutureTask&amp;lt;&amp;gt;(() -&amp;gt; { System.</description>
    </item>
    
  </channel>
</rss>
