<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>算法 on AlfredNing</title>
    <link>https://AlfredNing.github.io/note/program/algorithm/</link>
    <description>Recent content in 算法 on AlfredNing</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://AlfredNing.github.io/note/program/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>并查集</title>
      <link>https://AlfredNing.github.io/note/program/algorithm/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Sat, 25 Mar 2023 08:37:28 +0800</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/algorithm/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>算法定义 有若干个样本a、c、d、e&amp;hellip; 类型假设是V
在并查集一开始认为每个样本都在单独的集合里
设计两个方法
`isSameSet(V x, V y)： 查询两个样本x和有是否在同一个集合里面 union(V x, V y) : 把x和y各自所有集合的样本合并成一个集合 两个算法的时间复杂度越小越好
算法流程 算法实现 import java.util.HashMap; import java.util.List; import java.util.Stack; /** * 并查集实现 * * @author Alfred.Ning * @since 2023年03月25日 09:23:00 */ public class UnionFindImpl { public static class Node&amp;lt;V&amp;gt; { V value; public Node(V v) { value = v; } } public static class UnionFind&amp;lt;V&amp;gt; { private HashMap&amp;lt;V, Node&amp;lt;V&amp;gt;&amp;gt; nodes; private HashMap&amp;lt;Node&amp;lt;V&amp;gt;, Node&amp;lt;V&amp;gt;&amp;gt; parents; private HashMap&amp;lt;Node&amp;lt;V&amp;gt;, Integer&amp;gt; sizeMap; public UnionFind(List&amp;lt;V&amp;gt; values) { nodes = new HashMap&amp;lt;&amp;gt;(); parents = new HashMap&amp;lt;&amp;gt;(); sizeMap = new HashMap&amp;lt;&amp;gt;(); for (V v : values) { Node&amp;lt;V&amp;gt; node = new Node&amp;lt;&amp;gt;(v); nodes.</description>
    </item>
    
    <item>
      <title>Kmp</title>
      <link>https://AlfredNing.github.io/note/program/algorithm/kmp/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://AlfredNing.github.io/note/program/algorithm/kmp/</guid>
      <description>使用场景 多用于子串匹配问题
流程 在暴力解的过程当中有加速
定义： 在该位置之前的前缀与后缀的长度，但不能取到字符串的整体长度，定义为指标信息
解释：
对匹配串建立上述指标信息 匹配过程 求解证明 x-r 与 y-r&amp;rsquo;是相同，从i位置匹配match串等同于从match的q位置进行匹配
i位置到r位置一定不能匹配match
验证：假设i位置到r位置，有个k位置能够匹配match串，那就说明从k位置到x位置是相同的，也就是match串y位置之前字符串的一个后缀，此时，与next的数组定义违反，出现了一个更长的。假设不成立。
next数组生成 match长度为M,时间复杂度为O(M)
next[0] = -1;
next[1] = 0;
next[2] = 0位置和1位置决定;
求i位置的next[i]时候，前面所有位置都已经准备好
next证明 来到i位置next[i]最大为next[i+1]+1
假设next[i]&amp;gt;next[i-1] + 1,
那么说明next[i-1]求解错误，矛盾，不成立
代码实现 public class Kmp { public static int getIndexOf(String s, String match) { if (s == null || match == null || match.length() &amp;lt; 1 || s.length() &amp;lt; match.length()) { return -1; } char[] strs = s.toCharArray(); char[] matchs = match.</description>
    </item>
    
  </channel>
</rss>
